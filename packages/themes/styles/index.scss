/* ******************************************************************************************************************************************************* */
/* LICENSED UNDER THE MIT LICENSE. SEE LICENSE FILE IN THE PROJECT ROOT FOR FULL LICENSE INFORMATION.                                                      */
/* COPYRIGHT Â© 2006 - 2023 WANG YUCAI. ALL RIGHTS RESERVED.                                                                                                */
/* ******************************************************************************************************************************************************* */

@use "sass:math" as *;
@use "sass:map" as *;
@use "./lib/variables" as vars;
@use "./lib/colors" as colors;

:root {
	@each $-textsize-key, $-textsize-value in vars.$textsize-map {
		--def-text#{$-textsize-key}: #{div($-textsize-value, vars.$base-value)}rem;
	}

	--def-font-family: "Microsoft Yahei";
	@include colors.generate-color-variables;
}

.transparent {
	background-color: transparent;
}

@each $-key in vars.$color-list {
	.#{$-key} {
		background-color: var(--def-#{$-key});
	}

	.#{$-key}-text {
		background-color: var(--def-#{$-key});
	}
}

.text {
	@at-root &-reference {
		font-size: #{vars.$base-value}px;
	}

	@each $-textsize-key, $-textsize-value in vars.$textsize-map {
		@at-root &#{$-textsize-key} {
			font-size: var(--def-text#{$-textsize-key});
		}
	}
}

.italic {
	font-style: italic;
}

@each $-item in ("bold", "bolder") {
	.#{$-item} {
		font-weight: #{$-item};
	}

	.#{$-item}-italic {
		@extend .#{$-item};
		@extend .italic;
	}
}

@each $-item in ("absolute", "relative", "fixed") {
	.#{$-item} {
		position: #{$-item};
	}
}

@each $-item in ("block", "inline", "inline-block", "flex") {
	.#{$-item} {
		display: #{$-item};
	}
}

.justify-content {
	@each $-key, $-value in deep-merge(vars.$flexalign-basemap, vars.$flexalign-horizontalmap) {
		@at-root &-#{$-key} {
			@extend .flex;
			justify-content: #{$-value};
		}
	}
}

.align-items {
	@each $-key, $-value in deep-merge(vars.$flexalign-basemap, vars.$flexalign-verticalmap) {
		@at-root &-#{$-key} {
			@extend .flex;
			align-items: #{$-value};
		}
	}
}

.flex {
	@each $-item in vars.$flexdirection-list {
		@at-root &-#{$-item} {
			@extend .flex;
			flex-direction: #{$-item};
		}
	}

	@each $-item in vars.$flexwrap-list {
		@at-root &-#{$-item} {
			@extend .flex;
			flex-wrap: #{$-item};
		}
	}

	> .average-grow {
		flex-grow: 1;
	}

	> .no-shrink {
		flex-shrink: 0;
	}
}

* {
	font-family: var(--def-font-family);
}

div {
	@extend .relative;
}

html {
	@extend .text-reference;
}

.no {
	&-width {
		width: 0;
	}

	&-height {
		height: 0;
	}

	&-line-height {
		line-height: 0;
	}

	&-border {
		border: 0 none transparent;
	}

	&-padding {
		padding: 0;
	}

	&-margin {
		margin: 0;
	}

	@each $-key in vars.$rectangle {
		&-#{$-key}-border {
			border-#{$-key}: 0 none transparent;
		}

		&-#{$-key}-padding {
			padding-#{$-key}: 0;
		}

		&-#{$-key}-margin {
			margin-#{$-key}: 0;
		}
	}
}

.auto {
	&-width {
		width: auto;
	}

	&-height {
		height: auto;
	}

	&-line-height {
		line-height: auto;
	}

	&-padding {
		padding: auto;
	}

	&-margin {
		margin: auto;
	}

	@each $-key in vars.$rectangle {
		&-padding -#{$-key} {
			padding-#{$-key}: auto;
		}

		&-margin-#{$-key} {
			margin-#{$-key}: auto;
		}
	}
}

@for $-value from 1 through 100 {
	.width-#{$-value} {
		width: #{$-value}px;
	}

	.width-#{$-value}p {
		width: percentage($number: div($-value, 100));
	}

	.max-width-#{$-value} {
		max-width: #{$-value}px;
	}

	.max-width-#{$-value}p {
		max-width: percentage($number: div($-value, 100));
	}

	.min-width-#{$-value} {
		min-width: #{$-value}px;
	}

	.min-width-#{$-value}p {
		min-width: percentage($number: div($-value, 100));
	}

	.height-#{$-value} {
		height: #{$-value}px;
	}

	.height-#{$-value}p {
		height: percentage($number: div($-value, 100));
	}

	.max-height-#{$-value} {
		max-height: #{$-value}px;
	}

	.max-height-#{$-value}p {
		max-height: percentage($number: div($-value, 100));
	}

	.min-height-#{$-value} {
		min-height: #{$-value}px;
	}

	.min-height-#{$-value}p {
		min-height: percentage($number: div($-value, 100));
	}

	.line-height-#{$-value} {
		line-height: #{$-value}px;
	}

	.line-height-#{$-value}p {
		line-height: percentage($number: div($-value, 100));
	}

	.padding-#{$-value} {
		padding: #{$-value}px;
	}

	.margin-#{$-value} {
		margin: #{$-value}px;
	}

	@each $-key in vars.$rectangle {
		.padding-#{$-key}-#{$-value} {
			padding-#{$-key}: #{$-value}px;
		}

		.margin-#{$-key}-#{$-value} {
			margin-#{$-key}: #{$-value}px;
		}
	}
}

@each $-item in (uppercase, lowercase) {
	.#{$-item} {
		text-transform: #{$-item};
	}
}

@each $-item in vars.$textalign-list {
	.text-#{$-item} {
		text-align: #{$-item};
		text-decoration: line-through;
	}
}

@each $-key, $-value in ("underline": "underline", "throughline": "line-through") {
	.#{$-key} {
		text-decoration-line: #{$-value};

		@each $-item in ("solid", "double", "dotted", "dashed", "wavy") {
			@at-root &-#{$-item} {
				@extend .#{$-key};
				text-decoration-style: #{$-item};
			}
		}
	}
}

a,
a:hover,
a:focus,
a:link,
a:visited {
	text-decoration: none;
}
